# 1) '''Магическими называются даты, в которых произведение дня и месяца
# составляет последние две цифры года. Например, 10 июня 1960 года –
# магическая дата, поскольку 10 ´ 6 = 60. Напишите функцию, определя-
# ющую, является ли введенная дата магической. Используйте написан-
# ную функцию в главной программе для отображения всех магических
# дат в XX ве­ке.'''
# def is_magical_date(day, month, year):
#     return day * month == year % 100
# print(is_magical_date(10,6,1960))
# def find_is_magic_century():
#     magical_date = []
#     for year in range(1900,2000):
#         for month in range(1,13):
#             for day in range(1,32):
#                 if day * month == year % 100:
#                     magical_date.append((day,month,year))
    
#     print("Magical Dates in the XX century")
#     for date in magical_date:
#         print(f"{date[0]:02d}-{date[1]:02d}-{date[2]}")
# find_is_magic_century()

# 2) '''Напишите функцию для определения количества дней в конкретном ме-
# сяце. Ваша функция должна принимать два параметра: номер месяца
# в виде целого числа в диапазоне от 1 до 12 и год, состоящий из четырех
# цифр. Убедитесь, что функция корректно обрабатывает февраль високос-
# ного года. В основной программе запросите у пользователя номер месяца
# и год и отобразите на экране количество дней в указанном месяце.'''

# def days_in_month(month,year):
#     if month < 1 or month > 12:
#         return "Ошибка: номер месяца должен быть от 1 до 12"

#     if month in {1, 3, 5, 7, 8, 10, 12}:
#         print(month)
#         return 31
#     elif month in {4, 6, 9, 11}:
#         return 30
#     else:
#         if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):
#             return 29
#         else:
#             return 28
# print(days_in_month(1,2024))

# 3) '''Напишите две функции с именами hex2int и int2hex для конвертации
# значений из шестнадцатеричной системы счисления (0, 1, 2, 3, 4, 5, 6, 7,
# 8, 9, A, B, C, D, E и F) в десятичную (по основанию 10) и обратно. Функ-
# ция hex2int должна принимать на вход строку с единственным символом
# в шестнадцатеричной системе и преобразовывать его в число от нуля
# до 15 в десятичной системе, тогда как функция int2hex будет выполнять
# обратное действие – принимать десятичное число из диапазона от 0 до
# 15 и возвращать шестнадцатеричный эквивалент. Обе функции должны
# принимать единственный параметр со входным значением и возвращать
# преобразованное число. Удостоверьтесь, что функция hex2int корректно
# обрабатывает буквы в верхнем и нижнем регистрах. Если введенное поль-
# зователем значение выходит за допустимые границы, вы должны вывести
# сообщение об ошибке.'''
def hex2int(hex_value):
    try:
        # Преобразование шестнадцатеричного значения в десятичное
        decimal_value = int(hex_value, 16)
        
        # Проверка на допустимый диапазон (0-15)
        if 0 <= decimal_value <= 15:
            return decimal_value
        else:
            return "Ошибка: введенное значение выходит за допустимые границы (0-15)."
    
    except ValueError:
        return "Ошибка: введенное значение не является шестнадцатеричным символом."


def int2hex(decimal_value):
    try:
        # Проверка на допустимый диапазон (0-15)
        if 0 <= decimal_value <= 15:
            # Преобразование десятичного значения в шестнадцатеричное
            hex_value = hex(decimal_value)[2:].upper()  # Убираем префикс "0x" и приводим к верхнему регистру
            return hex_value
        else:
            return "Ошибка: введенное значение выходит за допустимые границы (0-15)."
    
    except ValueError:
        return "Ошибка: введенное значение не является целым числом."

# Пример использования
try:
    user_input = input("Введите шестнадцатеричное значение или десятичное число от 0 до 15: ")
    
    if user_input.startswith("0x"):
        # Обработка ввода в формате "0x..."
        result = hex2int(user_input[2:])
        print(f"Десятичное значение: {result}")
    else:
        # Обработка ввода как десятичного числа
        result = int2hex(int(user_input))
        print(f"Шестнадцатеричное значение: {result}")

except ValueError as e:
    print(f"Ошибка: {e}")

# #

# 4) '''Представьте, что в вашем регионе устаревшим является формат номер-
# ных автомобильных знаков из трех букв, следом за которыми идут три
# цифры. Когда все номера такого шаблона закончились, было решено об-
# новить формат, поставив в начало четыре цифры, а за ними три буквы.
# Напишите функцию, которая будет генерировать случайный номерной
# знак. При этом номера в старом и новом форматах должны создаваться
# примерно с одинаковой вероятностью. В основной программе нужно сге-
# нерировать и вывести на экран случайный номерной знак.'''

# dailyreport