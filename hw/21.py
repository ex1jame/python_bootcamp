
# """
# –ó–∞–¥–∞–Ω–∏—è –ø–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º.
# """
# """
# 1) –û–ø–∏—à–∏—Ç–µ –ø–æ–ª–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ try-except:
# """
# # try:
# #   <body>
# # except:
# #   <body except>
# """
# 2) –î–∞–Ω —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥:
# b = 10
# c = 11
# print(a)
# –û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –æ—à–∏–±–∫—É, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å.
# """
# b = 10
# #     c = 11
# # try:
# #     print(a)
# # except NameError:
# #     print()
# """
# 3) –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ input
#  –∏ –¥–µ–ª–∏—Ç—å –æ–¥–Ω–æ –Ω–∞ –¥—Ä—É–≥–æ–µ. –û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –æ—à–∏–±–∫—É, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–Ω–∏–∫–Ω–µ—Ç –≤ —Å–ª—É—á–∞–µ,
#  ' –µ—Å–ª–∏ –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ –æ–∫–∞–∂–µ—Ç—Å—è 0 –∏ –≤—ã–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
# """
# # try:
# #     a = int(input("Vvedite chislo: "))
# #     b = int(input("Vvedite chislo: "))
# #     c = a / b
# #     print(c)
# # except ZeroDivisionError:
# #     print('Na nol ne deli')

# """
# 4) –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —á–µ—Ä–µ–∑ –∏–Ω–ø—É—Ç 2 —á–∏—Å–ª–∞ –∏ 
# –±—É–¥–µ—Ç –ø–µ—á–∞—Ç–∞—Ç—å –∏—Ö —Å—É–º–º—É. –û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –æ—à–∏–±–∫—É, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–Ω–∏–∫–Ω–µ—Ç, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 
# –≤–≤–µ–¥—ë—Ç –Ω–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –≤—ã–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
# """
# # try:
# #     a = input("Vvedite chislo: ").split()
# #     result = list(map(int, a))
# #     c = result[0] / result[1]
# #     print(c)
# # except ValueError:
# #     print('piwi chisla')
# """
# 5) –î–∞–Ω —Å–ª–æ–≤–∞—Ä—å. –ü–æ–ø—ã—Ç–∞–π—Ç–µ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É. –û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –æ—à–∏–±–∫—É, 
# –≤–æ–∑–Ω–∏–∫–∞—é—â—É—é –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π –∫–ª—é—á –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
# """
# # dict_ = {
# #     'key':'value'
# # }
# # try:
# #     print(dict_.values())
# # except KeyError:
# #     print("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –∫–ª—é—á–∞")
# """
# 6)  –î–∞–Ω —Å–ø–∏—Å–æ–∫. –û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —ç–ª–µ–º–µ–Ω—Ç—É.
# """
# # list_ = [1,2,3,4,5,6]
# # try:
# #     print(list_[6])
# # except IndexError as i:
# #     print(i)
# """
# 7) –ü–æ–ø—ã—Ç–∞–π—Ç–µ—Å—å –≤ –±–ª–æ–∫–µ try –ø—Ä–∏–Ω—è—Ç—å 2 —á–∏—Å–ª–∞ –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –æ–¥–Ω–æ –Ω–∞ –¥—Ä—É–≥–æ–µ. 
# –í –±–ª–æ–∫–µ except –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ —Å—Ä–∞–∑—É 2 –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏—è.
# """
# # try:
# #     a = float(input('Pervoe: '))
# #     b = float(input('Vtoroe: '))
# #     c = a / b
# #     print(c)
# # except (ValueError,ZeroDivisionError) as e:
# #     print(e)


# """
# üòç –ó–∞–ø—Ä–æ—Å–∏—Ç–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—É–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —É –Ω–µ–≥–æ —Å–µ–π—á–∞—Å –µ—Å—Ç—å –≤ –±—É–º–∞–∂–Ω–∏–∫–µ. 
# –ï—Å–ª–∏ –æ–Ω –≤–≤–µ–¥—ë—Ç —Å—É–º–º—É, –º–µ–Ω—å—à—É—é —á–µ–º 0, —Ç–æ –≤—ã–±—Ä–æ—Å–∏—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º 
# "–°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π!"
# """

# print('1111'.isnumeric(), 'asdf')
# try:
#     print('–í–∞—à –±–∞–ª–∞–Ω—Å: ', (int(input('chislo: '))+1-1) / 1)
# except ValueError:
#     print('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: ')
# except ZeroDivisionError:
#     print('–í–≤–µ–¥–∏—Ç–µ –±–æ–ª—å—à–µ –Ω—É–ª—è!')

# try:
#     a = input('sum your bumajnik: ')
#     if a.isnumeric():
#         print("niorm")
#     else:    
#         raise ValueError
   
    
        
# except ValueError as t:
#     print('–°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π!')

# """
# 9)  –í –±–ª–æ–∫–µ try –∑–∞–ø—Ä–æ—Å–∏—Ç–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–æ–¥ –µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞. 
# –ó–∞—Ç–µ–º –≤ —Ç–æ–º –∂–µ –±–ª–æ–∫–µ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç –Ω–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏–µ.
#  –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–π, –≤—ã–±—Ä–æ—Å–∏—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Å 
#  —Ç–µ–∫—Å—Ç–æ–º "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω". –û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ —Ç–∞–∫–∂–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç 
#  —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ —á–∏—Å–ª–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º '–í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç'. –ï—Å–ª–∏ –æ—à–∏–±–æ–∫ –Ω–µ –≤–æ–∑–Ω–∏–∫–ª–æ,
#    —Ç–æ —Ä–∞—Å–ø–µ—á–∞—Ç–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "–°–ø–∞—Å–∏–±–æ!", –∞ –∑–∞—Ç–µ–º "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è", –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ,
#      –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∏–ª–∏ –Ω–µ—Ç.
# """
# try:
#     a = input('vozrast: ')
#     result = int(a)

#     if result < 18:
#         print("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
# except ValueError:
#     print("–í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç")
# else:
#     print('Spasibo')
# finally:
#     print('Poka')    

# dict_ = {
#     'key':'value'
# }
# try:
#     print(dict_['key'])
# except KeyError:
#     print("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –∫–ª—é—á–∞")

# –ó–∞—è–¥–ª—ã–π —Ç—É—Ä–∏—Å—Ç –≤–µ–¥–µ—Ç —Ç—â–∞—Ç–µ–ª—å–Ω—ã–π —É—á–µ—Ç —Å–≤–æ–∏—Ö –ø–æ—Ö–æ–¥–æ–≤. –í–æ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Ö–æ–¥–∞, 
    # –∫–æ—Ç–æ—Ä—ã–π –∑–∞–Ω—è–ª —Ä–æ–≤–Ω–æ —à–∞–≥–∏, –∑–∞ –∫–∞–∂–¥—ã–º —à–∞–≥–æ–º –æ—Ç–º–µ—á–∞–ª–æ—Å—å, –±—ã–ª –ª–∏ —ç—Ç–æ –ø–æ–¥—ä–µ–º –≤ –≥–æ—Ä—É ,
    # –∏–ª–∏ —Å–ø—É—Å–∫ ,—à–∞–≥. –ü–æ—Ö–æ–¥—ã –≤—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ –º–æ—Ä—è, –∏ –∫–∞–∂–¥—ã–π 
    # —à–∞–≥ –≤–≤–µ—Ä—Ö –∏–ª–∏ –≤–Ω–∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π–∏–∑–º–µ–Ω–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü—ã –≤—ã—Å–æ—Ç—ã. –ú—ã –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–µ
    # —Ç–µ—Ä–º–∏–Ω—ã:
# –ì–æ—Ä–∞ ‚Äì —ç—Ç–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç—É–ø–µ–Ω–µ–∫ –Ω–∞–¥ —É—Ä–æ–≤–Ω–µ–º –º–æ—Ä—è, –Ω–∞—á–∏–Ω–∞—è 
#     —Å–æ —Å—Ç—É–ø–µ–Ω—å–∫–∏ –≤–≤–µ—Ä—Ö –æ—Ç —É—Ä–æ–≤–Ω—è –º–æ—Ä—è –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—è —Å—Ç—É–ø–µ–Ω—å–∫–æ–π –≤–Ω–∏–∑ –¥–æ —É—Ä–æ–≤–Ω—è –º–æ—Ä—è.
# # –î–æ–ª–∏–Ω–∞ ‚Äî —ç—Ç–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç—É–ø–µ–Ω–µ–π –Ω–∏–∂–µ —É—Ä–æ–≤–Ω—è –º–æ—Ä—è, –Ω–∞—á–∏–Ω–∞—è —Å–æ 
#     —Å—Ç—É–ø–µ–Ω—å–∫–∏ –≤–Ω–∏–∑ –æ—Ç —É—Ä–æ–≤–Ω—è –º–æ—Ä—è –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—è —Å—Ç—É–ø–µ–Ω—å–∫–æ–π –≤–≤–µ—Ä—Ö –¥–æ —É—Ä–æ–≤–Ω—è –º–æ—Ä—è.
# # –ó–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥—ä–µ–º–æ–≤ –∏ —Å–ø—É—Å–∫–æ–≤ –≤–æ –≤—Ä–µ–º—è –ø–æ—Ö–æ–¥–∞, –Ω–∞–π–¥–∏—Ç–µ –∏ –≤—ã–≤–µ–¥–∏—Ç–µ 
#     –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–ª–∏–Ω .
# –ø—Ä–∏–º–µ—Ä 1:
#  path = 8
#  steps = 'UDDDUDUU'
#  result = 1 dolina
# –ø—Ä–∏–º–µ—Ä 2:
#  path = 10
#  steps = 'DUDDDUUDUU'
#  result = 2 dolina
from typing import List

class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        for i in range(len(nums) - 1):
            print(i)
            for j in range(i + 1, len(nums)):
                print(j)
                if nums[i] + nums[j] == target:
                    return [i, j]

# Example usage:
solution = Solution()

nums1 = [2, 7, 11, 15]
target1 = 9
print(solution.twoSum(nums1, target1))  # Output: [0, 1]

nums2 = [3, 2, 4]
target2 = 6
print(solution.twoSum(nums2, target2))  # Output: [1, 2]

nums3 = [3, 3]
target3 = 6
print(solution.twoSum(nums3, target3))  # Output: [0, 1]

