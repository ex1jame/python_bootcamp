
"""
1) –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å 2 —á–∏—Å–ª–∞, 
—Å–∫–ª–∞–¥—ã–≤–∞—Ç—å –∏—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–æ–∂–µ–Ω–∏—è.
"""
# def sum_of_args(a: int,b: int,) -> int:
#         """Returns sum of given arguments"""
#         return a + b
# print(sum_of_args(15,2))
"""
2) –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å—Ç—Ä–æ–∫—É.
 –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–æ–¥–∏—Ç—å –¥–ª–∏–Ω—É —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏(–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é len).
"""
# def line_str(text:str) -> str:
#         """Returns len of arguments"""
#         count = 0
#         for _ in text:
#                 count += 1
                
#         return count
# print(line_str('rfdnskjfdnjkfnrefnjewdnfklsd'))
"""
3) –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞. 
–ó–∞–¥–∞—á–∞ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–≤–æ–¥–∏—Ç—å —Ç–∏–ø –ø—Ä–∏–Ω—è—Ç—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.
"""
# def two_parametrs(a:int,b:str) -> type:
#     return print(type(a),type(b))
# two_parametrs(45,'fsdfdsfds')
"""
4) –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å 2 —á–∏—Å–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏—Ö –¥–µ–ª–µ–Ω–∏—è.
"""
# def divide_of_args(a: int,b: int,) -> int:
#         """Returns divide of given arguments"""
#         return a / b
# print(divide_of_args(15,2))
"""
5) –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å. 
–ü—Ä–æ–π–¥–∏—Ç–µ—Å—å –ø–æ —Å–ª–æ–≤–∞—Ä—é —Ü–∏–∫–ª–æ–º –∏ —Ä–∞—Å–ø–µ—á–∞—Ç–∞–π—Ç–µ –≤—Å–µ –µ–≥–æ –∫–ª—é—á–∏
"""
# def dict_of_args(dict_test:dict) -> dict:
#         """Returns divide of given arguments"""
#         for _ in dict_test:
                
#             return dict_test.keys()
# dict_ = {
#     '123' : '321312',
#     '1232' : '321312',
#     '1242' : '321312',
# }
# print(dict_of_args(dict_))
"""
6) –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç "It's odd number" –µ—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ –Ω–µ –∫—Ä–∞—Ç–Ω–æ –¥–≤—É–º –∏ "It's even number" –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
"""
# def divide_of_args(a: int) -> str:
#         """Returns odd or even given arguments"""
#         if a % 2 == 0:
#                 print('It\'s even number')
#         else:
#                 print("It's odd number")
#         return a
# print(divide_of_args(13))
"""
7) –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å—Ç—Ä–æ–∫—É –∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º. –ü—Ä–æ–±–µ–ª—ã –∏ —Ä–µ–≥–∏—Å—Ç—Ä —É—á–∏—Ç—ã–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.
(–ü–∞–ª–∏–Ω–¥—Ä–æÃÅ–º, –ø–µÃÅ—Ä–µ–≤–µ—Ä—Ç–µ–Ω—å ‚Äî —á–∏—Å–ª–æ, –±—É–∫–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ, —Å–ª–æ–≤–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç, –æ–¥–∏–Ω–∞–∫–æ–≤–æ —á–∏—Ç–∞—é—â–µ–µ—Å—è –≤ –æ–±–æ–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö. –ù–∞–ø—Ä–∏–º–µ—Ä, —á–∏—Å–ª–æ 101; —Å–ª–æ–≤–∞ "–∫–æ–∫", "—Ç–æ–ø–æ—Ç", "–∫–æ–º–æ–∫" –∏ —Ç.–¥.)
"""
# def isPalindrome(string) -> str:
    
#     if string == string[::-1]:
#         print('–≠—Ç–æ –ø–∞–ª–∏–Ω–¥—Ä–æ–º')
#     else:
#         print('–ù–µ –ø–∞–ª–∏–Ω–¥—Ä–æ–º')
    
#     return string
# print(isPalindrome('kok'))

"""
üòç –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–≤–∞ —á–∏—Å–ª–∞. –û–Ω–∞ –¥–æ–ª–∂–Ω–∞ —Å—Ä–∞–≤–Ω–∏—Ç—å —ç—Ç–∏ —á–∏—Å–ª–∞ –º–µ–∂–¥—É —Å–æ–±–æ–π –∏ –≤—ã–≤–µ—Å—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
"""
# def isPalindrome(a:int,b:int) -> int:
    
#     if a == b:
#         print('—Ä–∞–≤–Ω—ã')
#     elif a > b:
#         print('–ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ')
#     else:
#         print('–í—Ç–æ—Ä–æ–µ –±–æ–ª—å—à–µ')

    
#     return a , b
# print(isPalindrome(5,6))
"""
9) –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ.
"""
# def isPalindrome(a):
#     num = 1
#     for i in a:
#         num *= i
        
#     return num
# list_ = [1,2,3,4,5]
# print(isPalindrome(list_))
"""
10) –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É –≤—Å–µ—Ö –µ–≥–æ —Ü–∏—Ñ—Ä.
 –ù–∞–ø—Ä–∏–º–µ—Ä, —á–∏—Å–ª–æ 123 --> 6
"""

# def isPalindrome(a):
#     string = str(a)
#     num = 0
#     for i in string:
#         num += int(i)
        
#     return num
# list_ = 1234
# print(isPalindrome(list_))


# –ó–∞—è–¥–ª—ã–π —Ç—É—Ä–∏—Å—Ç –≤–µ–¥–µ—Ç —Ç—â–∞—Ç–µ–ª—å–Ω—ã–π —É—á–µ—Ç —Å–≤–æ–∏—Ö –ø–æ—Ö–æ–¥–æ–≤. –í–æ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Ö–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–Ω—è–ª —Ä–æ–≤–Ω–æ —à–∞–≥–∏, –∑–∞ –∫–∞–∂–¥—ã–º —à–∞–≥–æ–º –æ—Ç–º–µ—á–∞–ª–æ—Å—å, –±—ã–ª –ª–∏ —ç—Ç–æ –ø–æ–¥—ä–µ–º –≤ –≥–æ—Ä—É ,, –∏–ª–∏ —Å–ø—É—Å–∫ ,—à–∞–≥. –ü–æ—Ö–æ–¥—ã –≤—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ –º–æ—Ä—è, –∏ –∫–∞–∂–¥—ã–π —à–∞–≥ –≤–≤–µ—Ä—Ö –∏–ª–∏ –≤–Ω–∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π–∏–∑–º–µ–Ω–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü—ã –≤—ã—Å–æ—Ç—ã. –ú—ã –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —Ç–µ—Ä–º–∏–Ω—ã:
# –ì–æ—Ä–∞ ‚Äì —ç—Ç–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç—É–ø–µ–Ω–µ–∫ –Ω–∞–¥ —É—Ä–æ–≤–Ω–µ–º –º–æ—Ä—è,
#  –Ω–∞—á–∏–Ω–∞—è —Å–æ —Å—Ç—É–ø–µ–Ω—å–∫–∏ –≤–≤–µ—Ä—Ö –æ—Ç —É—Ä–æ–≤–Ω—è –º–æ—Ä—è –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—è —Å—Ç—É–ø–µ–Ω—å–∫–æ–π –≤–Ω–∏–∑ –¥–æ —É—Ä–æ–≤–Ω—è –º–æ—Ä—è.
# –î–æ–ª–∏–Ω–∞ ‚Äî —ç—Ç–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç—É–ø–µ–Ω–µ–π –Ω–∏–∂–µ —É—Ä–æ–≤–Ω—è –º–æ—Ä—è, –Ω–∞—á–∏–Ω–∞—è
#  —Å–æ —Å—Ç—É–ø–µ–Ω—å–∫–∏ –≤–Ω–∏–∑ –æ—Ç —É—Ä–æ–≤–Ω—è –º–æ—Ä—è –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—è —Å—Ç—É–ø–µ–Ω—å–∫–æ–π –≤–≤–µ—Ä—Ö –¥–æ —É—Ä–æ–≤–Ω—è –º–æ—Ä—è.
# –ó–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥—ä–µ–º–æ–≤ –∏ —Å–ø—É—Å–∫–æ–≤ –≤–æ –≤—Ä–µ–º—è –ø–æ—Ö–æ–¥–∞, –Ω–∞–π–¥–∏—Ç–µ –∏ –≤—ã–≤–µ–¥–∏—Ç–µ
#  –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–ª–∏–Ω .
# –ø—Ä–∏–º–µ—Ä 1:
#  path = 8
#  steps = 'UDDDUDUU'
#  result = 1 dolina
# –ø—Ä–∏–º–µ—Ä 2:
#  path = 10
#  steps = 'DUDDDUUDUU'
#  result = 2 dolina

def calculate_fuel_consumption(kilometers = 300, fuel_used = 30):print(f'–ù–∞ 100–∫–º –±—ã–ª–æ —Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–æ {((fuel_used / kilometers) * 100 ):.2f}–ª –≥–æ—Ä—é—á–µ–≥–æ')
calculate_fuel_consumption()